##### ***Automated Testing of Indian License Plate Validation***



This project contains:

\- A Python function (`is\_valid\_license\_plate`) that validates Indian license plate numbers using regular expressions.

\- A pytest script that automatically tests the function against \*\*1000 license plate samples\*\* (500 valid, 500 invalid).



---



###### ***Steps to Run the Code***



1\. \*\*Clone or copy the project files\*\* into a folder

Automated License Plate Matching/

├── license\_plate.py

├── test\_license\_plate.py

├── README.md



2\. \*\*Install dependencies\*\* (preferably in a virtual environment):

```bash

pip install pytest



3\. Run the tests:



Option A: Run pytest directly



pytest -v





Option B: Run with Python



python test\_license\_plate.py



4\. Check results:



If all test cases pass → you’ll see 1000 passed.



If any fail → pytest will report which plate(s) failed.



###### ***Dependencies***



Python 3.8+



pytest (for automated testing)



re (Python’s built-in regular expression module, no installation required)



random and string (Python built-ins, used for generating test data)



###### ***Assumptions Made***



License Plate Format (Modern Indian Standard)



\[State Code]\[District Code]\[Series]\[Number]





&nbsp; 2 capital letters (state code, e.g., MH, KA, DL)



&nbsp; 2 digits (district code, e.g., 01, 23)



&nbsp; 1–2 capital letters (series code, e.g., AB, C)



&nbsp; 4 digits (vehicle number, 0001–9999)



Example of valid plates:



&nbsp; MH12AB1234



&nbsp; DL05C6789



Example of invalid plates:



&nbsp; mh12AB1234 (lowercase letters)



&nbsp; XYZ123456 (wrong length)



&nbsp; M1234 (missing parts)



Only modern format is validated. Older or special formats (e.g., military, temporary registrations) are considered invalid.



Test data:



&nbsp; 500 valid plates are randomly generated following the above rules.



&nbsp; 500 invalid plates are randomly generated by breaking the rules (wrong lengths, lowercase, missing parts, etc.).



###### ***Output Summary***



Total tests: 1000



Expected result: All pass (500 valid detected as valid, 500 invalid detected as invalid).



Pytest will show detailed output if any case fails.

